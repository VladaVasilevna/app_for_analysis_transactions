from typing import Any, Dict, List, Optional

import pytest

from src.services import investment_bank


@pytest.mark.parametrize(
    "month, transactions, limit, expected",
    [
        # Сценарий 1: Транзакции с отрицательными суммами
        (
            "2024-03",
            [
                {"Дата операции": "15.03.2024 12:00:00", "Сумма операции": -123.45},
                {"Дата операции": "20.03.2024 12:00:00", "Сумма операции": -76.55},
            ],
            10,
            10,
        ),  # (130 - 123.45) + (80 - 76.55)
        # Сценарий 2: Транзакции с положительными суммами
        (
            "2024-03",
            [
                {"Дата операции": "10.03.2024 12:00:00", "Сумма операции": 50.0},
                {"Дата операции": "15.03.2024 12:00:00", "Сумма операции": -30.0},
            ],
            10,
            0,
        ),  # Только одна транзакция с расходом (-30)
        # Сценарий 3: Нет транзакций за указанный месяц
        ("2024-04", [], 10, None),  # Нет транзакций
        # Сценарий 4: Смешанные транзакции
        (
            "2024-03",
            [
                {"Дата операции": "01.03.2024 12:00:00", "Сумма операции": -15.0},
                {"Дата операции": "05.03.2024 12:00:00", "Сумма операции": -25.0},
                {"Дата операции": "10.03.2024 12:00:00", "Сумма операции": 100.0},
                {"Дата операции": "15.03.2024 12:00:00", "Сумма операции": -75.0},
            ],
            10,
            15,
        ),  # Округление по расходам (-15, -25 и -75)
        # Сценарий 5: Разные лимиты округления
        (
            "2024-03",
            [
                {"Дата операции": "15.03.2024 12:00:00", "Сумма операции": -123.45},
                {"Дата операции": "20.03.2024 12:00:00", "Сумма операции": -76.55},
            ],
            50,
            50,
        ),  # (150 - 123.45) + (100 - 76.55)
    ],
)
def test_investment_bank(
    month: str, transactions: List[Dict[str, Any]], limit: int, expected: Optional[float]
) -> None:
    """Тестирование функции investment_bank с параметризацией."""

    result = investment_bank(month, transactions, limit)

    if expected is None:
        assert result is None
    else:
        assert result == expected


def test_investment_bank_invalid_date_format(transactions: List[Dict[str, Any]]) -> None:
    """Тест для некорректного формата даты."""
    with pytest.raises(ValueError):
        investment_bank("2023/01", transactions, limit=10)


def test_investment_bank_edge_case(transactions: List[Dict[str, Any]]) -> None:
    """Тест для случая, когда сумма транзакции равна лимиту."""
    transactions_edge = [
        {"Дата операции": "15.01.2023 14:00:00", "Сумма операции": 100.00},
        {"Дата операции": "20.01.2023 10:30:00", "Сумма операции": 50.00},
    ]
    result = investment_bank("2023-01", transactions_edge, limit=50)
    assert result == 0.0  # Ожидаемая сумма отложенная в Инвесткопилку равна нулю
